}
potentials <- OpportPotentials(opportgrid = opportunities, nbclass = 8, mask = spatMask)
DiscretMap <- function(potentials, nbclass = 8){
# create color palette and discretize
colPal <- rev(brewer.pal(n = nbclass, name = "RdYlBu"))
tabpot$POTDISCRET <- as.character(cut(tabpot$POTENTIALS,
breaks = quantile(tabpot$POTENTIALS, probs = seq(0, 1, 1/nbclass)),
labels = paste("QUANT_", seq(1, nbclass, 1)), right = FALSE, include.lowest = TRUE))
# create map
printMap <- ggplot(tabpot) +
geom_raster(aes(x = COORDX, y = COORDY, fill = POTDISCRET)) +
coord_equal() + scale_fill_manual(values = colPal) + theme_bw()
return(printMap)
}
potentials$layer
plot(potentials, col = potentials$layer)
opportunities <- PointsOpport(knownpts = spatPts, varname = "POPULATION",
span = 1000, beta = 2, mask = spatMask)
potentials <- OpportPotentials(opportgrid = opportunities, nbclass = 8, mask = spatMask)
plot(potentials, col = potentials$layer)
potentials$layer
help(plyr::mapvalues)
help("mapvalues")
library(RColorBrewer)
display.brewer.all()
plot(potentials, col = plyr::mapvalues(potentials$layer,
from = potentials$layer,
to = brewer.pal(n = 8, name = "Reds"))
)
library(spgrass6)
initGRASS(gisBase = "/usr/lib/grass64", home = getwd(), override = TRUE)
writeVECT6(SDF = potentials, vname = "popol", v.in.ogr_flags = c("o", "overwrite"))
execGRASS("v.generalize", flags = c("overwrite"), input = "popol", output = "polySimple", threshold = 1, method = "snakes", alpha = 1, beta = 1)
vivi <- readVECT6(vname = "polySimple")
vivi$cat
plot(vivi)
plot(polyPot, add = T)
plot(potentials, add = T)
plot(vivi)
plot(potentials)
plot(vivi, col = plyr::mapvalues(vivi$cat,
from = vivi$cat,
to = brewer.pal(n = 8, name = "Reds")))
opportunities <- PointsOpport(knownpts = spatPts, varname = "POPULATION",
span = 2000, beta = 2, mask = spatMask, resolution = 400)
potentials <- OpportPotentials(opportgrid = opportunities, nbclass = 8, mask = spatMask)
plot(potentials, col = plyr::mapvalues(potentials$layer,
from = potentials$layer,
to = brewer.pal(n = 8, name = "Reds")))
opportunities <- PointsOpport(knownpts = spatPts, varname = "POPULATION",
span = 1500, beta = 2, mask = spatMask, resolution = 400)
potentials <- OpportPotentials(opportgrid = opportunities, nbclass = 8, mask = spatMask)
plot(potentials, col = plyr::mapvalues(potentials$layer,
from = potentials$layer,
to = brewer.pal(n = 8, name = "Reds")))
source("Potentials_functions.R")
library(sp)
library(rgdal)
library(rgeos)
library(raster)
library(fields)
library(RColorBrewer)
spatPts <- readOGR(dsn = "parispc_pts.shp", layer = "parispc_pts", stringsAsFactors = FALSE)
spatUnits <- readOGR(dsn = "parispc_com.shp", layer = "parispc_com", stringsAsFactors = FALSE)
spatMask <- readOGR(dsn = "parispc_mask.shp", layer = "parispc_mask", stringsAsFactors = FALSE)
library(sp)
library(rgdal)
library(rgeos)
library(raster)
library(fields)
library(RColorBrewer)
source("Potentials_functions.R")
opportunities <- PointsOpport(knownpts = spatUnits,
varname = "POPULATION",
span = 1500,
beta = 3,
mask = spatMask,
resolution = 400)
potentials <- OpportPotentials(opportgrid = opportunities,
nbclass = 8,
mask = spatMask)
potentials <- OpportPotentials(opportgrid = opportunities,
nbclass = 8,
mask = spatMask)
plot(potentials, col = plyr::mapvalues(potentials$layer,
from = potentials$layer,
to = brewer.pal(n = 8, name = "Reds")))
spatPts$POPULATION[1]
spatPts$POPULATION[1] <- -5
opportunities <- PointsOpport(knownpts = spatPts,
varname = "POPULATION",
span = 1500,
beta = 3,
mask = spatMask,
resolution = 400)
opportunities <- PointsOpport(knownpts = spatPts,
varname = "POPULATION",
span = 1500,
beta = 3,
mask = spatMask,
resolution = 200)
potentials <- OpportPotentials(opportgrid = opportunities,
nbclass = 8,
mask = spatMask)
plot(potentials, col = plyr::mapvalues(potentials$layer,
from = potentials$layer,
to = brewer.pal(n = 8, name = "Reds")))
ComputePotentials <- function(unknownpts, matopport, nbclass, mask, myproj)
{
# compute potentials and create raster
unknownpts$POTENTIALS <- apply(matopport, 2, sum, na.rm = TRUE)
equalInterval <- (max(unknownpts$POTENTIALS) - min(unknownpts$POTENTIALS)) / nbclass
brksVal <- seq(min(unknownpts$POTENTIALS), max(unknownpts$POTENTIALS), equalInterval)
unknownpts$POTDISCRET <- as.integer(cut(unknownpts$POTENTIALS,
breaks = brksVal,
labels = seq(1, nbclass, 1),
right = FALSE,
include.lowest = TRUE))
spatUnknownPts <- SpatialPointsDataFrame(coords = unknownpts[ , c(2, 3)],
data = unknownpts,
proj4string = CRS(myproj))
rastGrid <- raster(xmn = min(unknownpts$COORDX),
xmx = max(unknownpts$COORDX),
ymn = min(unknownpts$COORDY),
ymx = max(unknownpts$COORDY),
nrows = length(unique(unknownpts$COORDY)),
ncols = length(unique(unknownpts$COORDX)),
crs = CRS(myproj))
rastFilled <- rasterize(spatUnknownPts, rastGrid, field = "POTDISCRET")
if(!is.null(dim(mask))){
rastFilled <- mask(rastFilled, mask = mask)
}
getPoly <- rasterToPolygons(rastFilled, n = 16, digits = 24, dissolve = TRUE)
return(getPoly)
}
potentials <- OpportPotentials(opportgrid = opportunities,
nbclass = 8,
mask = spatMask)
plot(potentials, col = plyr::mapvalues(potentials$layer,
from = potentials$layer,
to = brewer.pal(n = 8, name = "Reds")))
spatPts <- readOGR(dsn = "DATA/parispc_pts.shp", layer = "parispc_pts", stringsAsFactors = FALSE)
spatUnits <- readOGR(dsn = "DATA/parispc_com.shp", layer = "parispc_com", stringsAsFactors = FALSE)
spatMask <- readOGR(dsn = "DATA/parispc_mask.shp", layer = "parispc_mask", stringsAsFactors = FALSE)
opportunities <- PointsOpport(knownpts = spatPts,
varname = "POPULATION",
span = 1500,
beta = 3,
mask = spatMask,
resolution = 200)
# compute potentials ----
potentials <- OpportPotentials(opportgrid = opportunities,
nbclass = 8,
mask = spatMask)
# plot potentials ----
plot(potentials, col = plyr::mapvalues(potentials$layer,
from = potentials$layer,
to = brewer.pal(n = 8, name = "Reds")))
library(sp)
library(rgdal)
library(rgeos)
library(raster)
library(fields)
library(RColorBrewer)
source("Potentials_functions.R")
opportunities <- PointsOpport(knownpts = spatPts,
varname = "POPULATION",
span = 1500,
beta = 3,
mask = spatMask,
resolution = 200)
potentials <- OpportPotentials(opportgrid = opportunities,
nbclass = 8,
mask = spatMask)
plot(potentials, col = plyr::mapvalues(potentials$layer,
from = potentials$layer,
to = brewer.pal(n = 8, name = "Reds")))
opportunities <- PointsOpport(knownpts = spatPts,
varname = "POPULATION",
span = 1500,
beta = 3,
resolution = 200)
# compute potentials ----
potentials <- OpportPotentials(opportgrid = opportunities,
nbclass = 8)
plot(potentials, col = plyr::mapvalues(potentials$layer,
from = potentials$layer,
to = brewer.pal(n = 8, name = "Reds")))
opportunities <- PointsOpport(knownpts = spatPts,
varname = "POPULATION",
span = 1500,
beta = 3,
mask = spatMask,
resolution = 250)
# compute potentials ----
potentials <- OpportPotentials(opportgrid = opportunities,
nbclass = 8,
mask = spatMask)
# plot potentials ----
plot(potentials, col = plyr::mapvalues(potentials$layer,
from = potentials$layer,
to = brewer.pal(n = 8, name = "Reds")))
library(sp)
library(rgdal)
library(rgeos)
library(raster)
library(fields)
library(RColorBrewer)
# load functions ----
source("Potentials_functions.R")
# load data ----
spatPts <- readOGR(dsn = "DATA/parispc_pts.shp", layer = "parispc_pts", stringsAsFactors = FALSE)
spatUnits <- readOGR(dsn = "DATA/parispc_com.shp", layer = "parispc_com", stringsAsFactors = FALSE)
spatMask <- readOGR(dsn = "DATA/parispc_mask.shp", layer = "parispc_mask", stringsAsFactors = FALSE)
plot(spatMask)
plot(spatUnits)
plot(spatPts, add = T)
plot(spatMask)
plot(spatUnits)
plot(spatPts, pch = 21, add = T)
plot(spatMask)
plot(spatUnits)
plot(spatPts, pch = 19, add = T)
plot(spatMask)
plot(spatUnits)
plot(spatPts, pch = 20, add = T)
opportunities <- PointsOpport(knownpts = spatPts,
varname = "POPULATION",
span = 1500,
beta = 3,
mask = spatMask,
resolution = 200)
matOpport <- opportunities$OPPORT
View(matOpport)
matOpport[1,1]
matOpport[1,2]
matOpport[1,2] == 0
opportunities <- PointsOpport(knownpts = spatPts,
varname = "POPULATION",
span = 2000,
beta = 2,
mask = spatMask,
resolution = 200)
matOpport <- opportunities$OPPORT
View(matOpport)
potentials <- OpportPotentials(opportgrid = opportunities,
nbclass = 8,
mask = spatMask)
plot(potentials, col = plyr::mapvalues(potentials$layer,
from = potentials$layer,
to = brewer.pal(n = 8, name = "Reds")))
potentials$layer
opportunities <- PointsOpport(knownpts = spatPts,
varname = "POPULATION",
span = 5000,
beta = 2,
mask = spatMask,
resolution = 300)
spatPts$POPULATION
matOpport <- opportunities$OPPORT
View(matOpport)
View(matOpport)
opportunities <- PointsOpport(knownpts = spatPts,
varname = "POPULATION",
span = 5000,
beta = 1,
mask = spatMask,
resolution = 200)
potentials <- OpportPotentials(opportgrid = opportunities,
nbclass = 8,
mask = spatMask)
# plot potentials ----
plot(potentials, col = plyr::mapvalues(potentials$layer,
from = potentials$layer,
to = brewer.pal(n = 8, name = "Reds")))
View(matOpport)
ComputeOpportunity <- function(knownpts, matdens, varname = varname)
{
matOpport <- knownpts@data[, varname] * matdens
return(round(matOpport, digits = 16))
}
opportunities <- PointsOpport(knownpts = spatPts,
varname = "POPULATION",
span = 4000,
beta = 2,
mask = spatMask,
resolution = 200)
matOpport <- opportunities$OPPORT
View(matOpport)
matOpport=1000*matOpport
View(matOpport)
dim(matOpport)
apply(matOpport, 2, which.max)
bibi <- apply(matOpport, 2, which.max)
dim(bibi)
unknownpts = opportgrid$UNKWPTS
unknownpts = opportunities$UNKWPTS
matopport = opportunities$OPPORT,
unknownpts = opportunities$UNKWPTS
myproj = opportunities$PROJ,
myproj = opportunities$PROJ
View(unknownpts)
unknownpts$REILLY <- apply(matopport, 2, which.max, na.rm = TRUE)
matopport = opportunities$OPPORT
View(matopport)
unknownpts$REILLY <- apply(matopport, 2, which.max, na.rm = TRUE)
unknownpts$REILLY <- apply(matopport, 2, which.max)
View(unknownpts)
spatUnknownPts <- SpatialPointsDataFrame(coords = unknownpts[ , c(2, 3)],
data = unknownpts,
proj4string = CRS(myproj))
rastGrid <- raster(xmn = min(unknownpts$COORDX),
xmx = max(unknownpts$COORDX),
ymn = min(unknownpts$COORDY),
ymx = max(unknownpts$COORDY),
nrows = length(unique(unknownpts$COORDY)),
ncols = length(unique(unknownpts$COORDX)),
crs = CRS(myproj))
rastFilled <- rasterize(spatUnknownPts, rastGrid, field = "REILLY")
mask = spatMask
rastFilled <- mask(rastFilled, mask = mask)
plot(rastFilled)
unique(unknownpts$REILLY)
sort(unique(unknownpts$REILLY))
contour(rastFilled)
getPoly <- rasterToPolygons(rastFilled, n = 8, digits = 16, dissolve = TRUE)
plot(getPoly)
View(matopport)
unique(as.matrix(rastFilled))
sort(unique(as.matrix(rastFilled)))
table(as.matrix(rastFilled))
table(unknownpts$REILLY)
table(as.matrix(rastGrid))
rastFilled <- rasterize(spatUnknownPts, rastGrid, field = "REILLY")
table(as.matrix(rastFilled))
rastFilled <- mask(rastFilled, mask = mask)
table(as.matrix(rastFilled))
opportunities <- PointsOpport(knownpts = spatPts,
varname = "POPULATION",
span = 4000,
beta = 2,
mask = spatMask,
resolution = 400)
unknownpts = opportunities$UNKWPTS
matopport = opportunities$OPPORT
myproj = opportunities$PROJ
mask = spatMask
unknownpts$REILLY <- apply(matopport, 2, which.max)
spatUnknownPts <- SpatialPointsDataFrame(coords = unknownpts[ , c(2, 3)],
data = unknownpts,
proj4string = CRS(myproj))
rastGrid <- raster(xmn = min(unknownpts$COORDX),
xmx = max(unknownpts$COORDX),
ymn = min(unknownpts$COORDY),
ymx = max(unknownpts$COORDY),
nrows = length(unique(unknownpts$COORDY)),
ncols = length(unique(unknownpts$COORDX)),
crs = CRS(myproj))
rastFilled <- rasterize(spatUnknownPts, rastGrid, field = "REILLY")
table(as.matrix(rastFilled))
plot(rastFilled)
rastFilled <- mask(rastFilled, mask = mask)
table(as.matrix(rastFilled))
getPoly <- rasterToPolygons(rastFilled, n = 8, digits = 16, dissolve = TRUE)
plot(getPoly)
plot(spatPts, pch = 20, add = T)
plot(getPoly)
plot(spatUnits, color = "lightgrey", add = T)
plot(getPoly)
plot(spatUnits, border = "lightgrey", add = T)
opportunities <- PointsOpport(knownpts = spatPts,
varname = "POPULATION",
span = 1000,
beta = 2,
mask = spatMask,
resolution = 400)
unknownpts = opportunities$UNKWPTS
matopport = opportunities$OPPORT
myproj = opportunities$PROJ
mask = spatMask
unknownpts$REILLY <- apply(matopport, 2, which.max)
spatUnknownPts <- SpatialPointsDataFrame(coords = unknownpts[ , c(2, 3)],
data = unknownpts,
proj4string = CRS(myproj))
rastGrid <- raster(xmn = min(unknownpts$COORDX),
xmx = max(unknownpts$COORDX),
ymn = min(unknownpts$COORDY),
ymx = max(unknownpts$COORDY),
nrows = length(unique(unknownpts$COORDY)),
ncols = length(unique(unknownpts$COORDX)),
crs = CRS(myproj))
rastFilled <- rasterize(spatUnknownPts, rastGrid, field = "REILLY")
if(!is.null(mask)){
rastFilled <- mask(rastFilled, mask = mask)
}
getPoly <- rasterToPolygons(rastFilled, n = 8, digits = 16, dissolve = TRUE)
plot(getPoly)
plot(spatUnits, border = "lightgrey", add = T)
table(as.matrix(rastFilled))
View(matopport)
table(matopport[1, ])
sumCol <- apply(matopport, 2, sum, na.rm = TRUE)
sumCol2 <- colSums(x = matopport, na.rm = TRUE, dims = 2)
sumCol2 <- colSums(x = matopport, na.rm = TRUE)
sumCol[1:10]
sumCol2[1:10]
identical(sumCol, sumCol2)
data(WorldPhones)
WorldPhones
mamat <- WorldPhones[-c(1, 2, 3), ]
mamat
mamat / c(2, 3, 4, 5)
mamat / c(2, 3, 4, 2, 3, 1, 2)
mamat / c(1, 2, 2, 2, 1, 1, 1)
mamat
t(t(mamat) / c(1, 2, 2, 2, 1, 1, 1))
matOpportPct <- 100 * t(t(matopport) / sumCol)
View(matOpportPct)
summary(matOpportPct)
summary(as.vector(matOpportPct))
summary(sumCol)
0/5
dim(x = matopport)
dim(sumCol)
dim(sumCol2)
length(sumCol2)
summary(as.vector(matopport))
unknownpts$HUFF <- apply(matOpportPct, 2, max, na.rm = TRUE)
View(unknownpts)
table(round(as.vector(matOpportPct), digits = 1))
table(round(as.vector(matOpportPct), digits = 1), exclude = NULL)
unknownpts$HUFF[is.na(unknownpts$HUFF) | is.nan(unknownpts$HUFF)] <- 0
table(round(as.vector(matOpportPct), digits = 1), exclude = NULL)
table(round(unknownpts$HUFF, digits = 1), exclude = NULL)
unknownpts$HUFF <- apply(matOpportPct, 2, max, na.rm = TRUE)
unknownpts$HUFF[is.na(unknownpts$HUFF) | is.infinite(unknownpts$HUFF)] <- 0
table(round(unknownpts$HUFF, digits = 1), exclude = NULL)
brksVal <- seq(0, 100, 10)
# discretize values
brksVal <- seq(0, 100, 10)
unknownpts$HUFFDISCRET <- as.integer(cut(unknownpts$HUFF,
breaks = brksVal,
labels = seq(1, 10, 1),
right = FALSE,
include.lowest = TRUE))
table(unknownpts$HUFFDISCRET)
spatUnknownPts <- SpatialPointsDataFrame(coords = unknownpts[ , c(2, 3)],
data = unknownpts,
proj4string = CRS(myproj))
rastGrid <- raster(xmn = min(unknownpts$COORDX),
xmx = max(unknownpts$COORDX),
ymn = min(unknownpts$COORDY),
ymx = max(unknownpts$COORDY),
nrows = length(unique(unknownpts$COORDY)),
ncols = length(unique(unknownpts$COORDX)),
crs = CRS(myproj))
rastFilled <- rasterize(spatUnknownPts, rastGrid, field = "HUFFDISCRET")
rastFilled <- mask(rastFilled, mask = mask)
plot(rastFilled)
ComputeReilly <- function(unknownpts, matopport, mask, myproj)
{
# compute Reilly catchment zones
unknownpts$REILLY <- apply(matopport, 2, which.max)
spatUnknownPts <- SpatialPointsDataFrame(coords = unknownpts[ , c(2, 3)],
data = unknownpts,
proj4string = CRS(myproj))
# build raster
rastGrid <- raster(xmn = min(unknownpts$COORDX),
xmx = max(unknownpts$COORDX),
ymn = min(unknownpts$COORDY),
ymx = max(unknownpts$COORDY),
nrows = length(unique(unknownpts$COORDY)),
ncols = length(unique(unknownpts$COORDX)),
crs = CRS(myproj))
rastFilled <- rasterize(spatUnknownPts, rastGrid, field = "REILLY")
if(!is.null(mask)){
rastFilled <- mask(rastFilled, mask = mask)
}
return(rastFilled)
}
# Compute Huff catchment zones ----
ComputeHuff <- function(unknownpts, matopport, mask, myproj)
{
# compute Reilly catchment zones
sumCol <- colSums(x = matopport, na.rm = TRUE)
matOpportPct <- 100 * t(t(matopport) / sumCol)
unknownpts$HUFF <- apply(matOpportPct, 2, max, na.rm = TRUE)
unknownpts$HUFF[is.na(unknownpts$HUFF) | is.infinite(unknownpts$HUFF)] <- 0
# discretize values
brksVal <- seq(0, 100, 10)
unknownpts$HUFFDISCRET <- as.integer(cut(unknownpts$HUFF,
breaks = brksVal,
labels = seq(1, 10, 1),
right = FALSE,
include.lowest = TRUE))
# build raster
spatUnknownPts <- SpatialPointsDataFrame(coords = unknownpts[ , c(2, 3)],
data = unknownpts,
proj4string = CRS(myproj))
rastGrid <- raster(xmn = min(unknownpts$COORDX),
xmx = max(unknownpts$COORDX),
ymn = min(unknownpts$COORDY),
ymx = max(unknownpts$COORDY),
nrows = length(unique(unknownpts$COORDY)),
ncols = length(unique(unknownpts$COORDX)),
crs = CRS(myproj))
rastFilled <- rasterize(spatUnknownPts, rastGrid, field = "HUFFDISCRET")
if(!is.null(mask)){
rastFilled <- mask(rastFilled, mask = mask)
}
return(rastFilled)
}
